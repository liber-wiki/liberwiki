# Generated by Django 5.1 on 2024-08-22 19:26

import uuid

import common.validators.allowed_characters
import django.db.models.deletion
import django.utils.timezone
import pgtrigger.compiler
import pgtrigger.migrations
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0003_add_title_and_entry"),
        ("pghistory", "0006_delete_aggregateevent"),
    ]

    operations = [
        migrations.CreateModel(
            name="EntryEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this object",
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="Date and time this object was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="Date and time this object was last updated"),
                ),
                (
                    "content",
                    models.JSONField(help_text="Content of the entry. In tiptap format.", verbose_name="Content"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TitleEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this object",
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="Date and time this object was created",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="Date and time this object was last updated"),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the title.",
                        max_length=255,
                        validators=[
                            common.validators.allowed_characters.AllowedCharactersValidator(
                                allowed_characters="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
                            )
                        ],
                        verbose_name="Title",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        db_index=False,
                        help_text="Slug of the title to display in urls.",
                        max_length=255,
                        verbose_name="Slug",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="entry",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "core_entryevent" ("author_id", "content", "created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "title_id", "updated_at") VALUES (NEW."author_id", NEW."content", NEW."created_at", NEW."id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."title_id", NEW."updated_at"); RETURN NULL;',
                    hash="bc8f3f40298e0ca047b9f1fa666584512f6aed62",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_7c1df",
                    table="core_entry",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="entry",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "core_entryevent" ("author_id", "content", "created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "title_id", "updated_at") VALUES (NEW."author_id", NEW."content", NEW."created_at", NEW."id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."title_id", NEW."updated_at"); RETURN NULL;',
                    hash="4bb6afea9e3c6d210748df71c6193fea2045bb72",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_49bdd",
                    table="core_entry",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="title",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "core_titleevent" ("created_at", "created_by_id", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "slug", "updated_at") VALUES (NEW."created_at", NEW."created_by_id", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."slug", NEW."updated_at"); RETURN NULL;',
                    hash="f28c801df1be849c30b28e36d5eb0aaea10a0031",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_2e3e6",
                    table="core_title",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="title",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "core_titleevent" ("created_at", "created_by_id", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "slug", "updated_at") VALUES (NEW."created_at", NEW."created_by_id", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."slug", NEW."updated_at"); RETURN NULL;',
                    hash="4e25cd119cb66015cce89fbc88e274a534eb1b0a",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_239da",
                    table="core_title",
                    when="AFTER",
                ),
            ),
        ),
        migrations.AddField(
            model_name="entryevent",
            name="author",
            field=models.ForeignKey(
                db_constraint=False,
                help_text="Author of the entry.",
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="entryevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="entryevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="core.entry",
            ),
        ),
        migrations.AddField(
            model_name="entryevent",
            name="title",
            field=models.ForeignKey(
                db_constraint=False,
                help_text="Title of the entry.",
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="core.title",
            ),
        ),
        migrations.AddField(
            model_name="titleevent",
            name="created_by",
            field=models.ForeignKey(
                db_constraint=False,
                editable=False,
                help_text="Creator of the title.",
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="titleevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="titleevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="core.title",
            ),
        ),
    ]
